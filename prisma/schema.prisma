datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  comments      Comment[] @relation("Comments")
  score         Score[]
  accounts      Account[]
  sessions      Session[]
}

model Comment {
  id           String    @id @default(cuid())
  content      String
  author       User      @relation("Comments", fields: [authorId], references: [id])
  authorId     String
  createdAt    DateTime  @default(now())
  score        Score[]
  replyingToId String?
  replyingTo   Comment?  @relation("Replies", fields: [replyingToId], references: [id])
  replies      Comment[] @relation("Replies")
}

model Score {
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  liked     Boolean

  @@id([commentId, userId])
}
